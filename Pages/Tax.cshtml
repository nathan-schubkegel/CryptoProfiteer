@page
@model TaxModel
@{
  ViewData["Title"] = "Tax";
}

<style>
.table > thead > tr:first-child > th {
    border: none;
}
</style>

<div id='sales-needing-tax-association'>
  <h1>
    Sales Needing Tax Association
  </h1>
  <table class="table table-sm">
    <thead>
      <tr>
        <th scope="col">Name</th>
        <th scope="col">Date</th>
        <th scope="col"></th>
        <th scope="col">Count</th>
        <th scope="col">Per Coin</th>
        <th scope="col">Fee</th>
        <th scope="col">Total</th>
      </tr>
    </thead>
    <tbody>
  @{
    bool hadSalesNeedingTaxAssociation = false;
    foreach (var t in Model.SalesNeedingTaxAssociation(null))
    {
      var isTrade = t.PaymentCoinType != "USD" && t.PaymentCoinType != "USDT";
      hadSalesNeedingTaxAssociation = true;
      <tr>
        <td>@t.FriendlyName</td>
        <td>@t.Time.ToLocalTime().ToString("g")</td>
        <td>
          <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#modalToAssociateOrder"
            onclick="onResolveOrderNeedingTaxAssociationClick('@(t.Id)', 
              '$@(t.PerCoinCostUsd?.ToString() ?? "<unknown>")@{ if (isTrade) { <text> USD (@t.PerCoinCost.ToString() @t.PaymentCoinType)</text> } }',
              '@(t.TotalCostUsd?.ToString("c") ?? "<unknown>")@{ if (isTrade) { <text> USD (@t.TotalCost.ToString() @t.PaymentCoinType)</text> } }',
              '@(t.CoinCount.ToString("G29"))',
              '@(t.FriendlyName)',
              '@(t.CoinType)',
              '@(t.Time.ToLocalTime().ToString("g"))',
              new Date('@(t.Time.ToString("o"))'))"
          >
            Resolve
          </button>
        </td>
        <td>@t.CoinCount.ToString("G29")</td>
        <td>$@(t.PerCoinCostUsd?.ToString() ?? "<unknown>")@{ if (isTrade) { <text> USD<br>(@t.PerCoinCost.ToString() @t.PaymentCoinType)</text> } }</td>
        <td>@(t.FeeUsd?.ToString("c") ?? "<unknown>")@{ if (isTrade) { <text> USD<br>(@t.Fee.ToString() @t.PaymentCoinType)</text> } }</td>
        <td>@(t.TotalCostUsd?.ToString("c") ?? "<unknown>")@{ if (isTrade) { <text> USD<br>(@t.TotalCost.ToString() @t.PaymentCoinType)</text> } }</td>
      </tr>
    }
  }
    </tbody>
  </table>
</div>

<script>
let resolveOrderNeedingTaxAssociation_orderId = '';
function onResolveOrderNeedingTaxAssociationClick(orderId, perCoinCost, prettyTotalCost, coinCount, prettyCoinType, machineCoinType, prettyOrderTime, machineOrderTime)
{
  resolveOrderNeedingTaxAssociation_orderId = orderId;

  let totalCostSpan = document.getElementById('modalToAssociateOrder-TotalCost');
  totalCostSpan.textContent = prettyTotalCost;
  
  let perCoinCostSpan = document.getElementById('modalToAssociateOrder-PerCoinCost');
  perCoinCostSpan.textContent = perCoinCost;

  let coinCountSpan = document.getElementById('modalToAssociateOrder-CoinCount');
  coinCountSpan.textContent = coinCount;

  let coinTypeSpan = document.getElementById('modalToAssociateOrder-CoinType');
  coinTypeSpan.textContent = prettyCoinType;

  let timeSpan = document.getElementById('modalToAssociateOrder-Time');
  timeSpan.textContent = prettyOrderTime;

  let tableBody = document.getElementById('modalToAssociateOrder-tableBody');
  for (var row of Array.from(tableBody.children)) {
    // hide any with coinType != CoinType
    // hide any with purchaseTime > order time
    let rowCoinType = row.getAttribute('data-coinType');
    let rowPurchaseTime = new Date(row.getAttribute('data-purchaseTime'));
    if (rowCoinType != machineCoinType || rowPurchaseTime > machineOrderTime) {
      row.style.display = 'none';
    }
    else {
      row.style.display = '';
    }
  }

  for (var checkbox of document.getElementsByClassName('button-for-selecting-purchase-orders')) {
    checkbox.checked = false;
  }
}
</script>

@{
  if (!hadSalesNeedingTaxAssociation) {
<script>
  let body = document.getElementById('sales-needing-tax-association');
  body.style.display = 'none';
</script>
  }
}

<!-- A modal dialog for associating a "sell" order with one or more "buy" orders -->
<div class="modal fade" id="modalToAssociateOrder" tabindex="-1" role="dialog" aria-labelledby="modalToAssociateOrder-Title" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalToAssociateOrder-Title">
          Date: <span id='modalToAssociateOrder-Time'>last Tuesday</span>
          <br>
          You sold
          <span id='modalToAssociateOrder-CoinCount'>9000</span>
          <span id='modalToAssociateOrder-CoinType'>BARFTH (barfthereum)</span>
          for
          <span id='modalToAssociateOrder-TotalCost'>$100,000,000</span>
          <br>
          Cost Per Coin: <span id='modalToAssociateOrder-PerCoinCost'>$100,000</span>
          <br>
          How was it purchased?
        </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <table class="table table-sm">
          <thead>
            <tr>
              <th scope="col">Purchase Date</th>
              <th scope="col"></th>
              <th scope="col">Count</th>
              <th scope="col">Per Coin</th>
              <th scope="col">Fee</th>
              <th scope="col">Total</th>
            </tr>
          </thead>
          <tbody id='modalToAssociateOrder-tableBody'>
        @{
          foreach ((var t, var coinCountRemaining, var costRemaining) in Model.PurchasesNeedingTaxAssociation(null))
          {
            var isTrade = t.PaymentCoinType != "USD" && t.PaymentCoinType != "USDT";
            <tr data-coinType='@t.CoinType' data-purchaseTime='@t.Time.ToString("o")'>
              <td>@t.Time.ToLocalTime().ToString("g")</td>
              <td>
                <input type="checkbox" autocomplete="off"
                  class="btn-check button-for-selecting-purchase-orders"
                  id="btn-check-order-@(t.Id)"
                  data-orderId="@(t.Id)"
                  data-orderCoinCount="@t.CoinCount"
                  data-orderCoinCountRemaining="@coinCountRemaining"
                  data-orderTotalCost="@Math.Abs(t.TotalCostUsd ?? 0m).ToString("F2")"
                  data-orderCostRemaining="@(costRemaining?.ToString() ?? "<unknown>")"
                  onclick='modalToAssociateOrderCheckBoxClick("@t.Id");'>
                <label class="btn btn-outline-primary btn-sm" for="btn-check-order-@(t.Id)">Select</label>
              </td>
              <td>@t.CoinCount.ToString("G29") @{if (coinCountRemaining != t.CoinCount) { <span>(@coinCountRemaining.ToString("G29") unassociated)</span> } }</td>
              
              <td>$@(t.PerCoinCostUsd?.ToString() ?? "<unknown>")@{ if (isTrade) { <text> USD<br>(@t.PerCoinCost.ToString() @t.PaymentCoinType)</text> } }</td>
              <td>@(t.FeeUsd?.ToString("c") ?? "<unknown>")@{ if (isTrade) { <text> USD<br>(@t.Fee.ToString() @t.PaymentCoinType)</text> } }</td>
              <td>@(t.TotalCostUsd?.ToString("c") ?? "<unknown>") @{if (coinCountRemaining != t.CoinCount) { <span>($@(costRemaining?.ToString() ?? "<unknown>") unassociated)</span> } }</td>
            </tr>
            <tr style="display:none" id="modalToAssociateOrder-inputsForOrder-@t.Id">
              <td></td>
              <td colspan="2">
                <div class="input-group input-group-sm">
                  <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroupPrepend-1">@t.CoinType</span>
                  </div>
                  <input type="text" class="form-control input-for-contributing-coin-count"
                    id="input-contributing-coin-count-for-order-@(t.Id)"
                    placeholder="Contributing Coin Count" 
                    aria-describedby="inputGroupPrepend-1"
                    value="555555555.55">
                </div>
              </td>
              <td colspan="3">
                <div class="input-group input-group-sm">
                  <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroupPrepend-2">$</span>
                  </div>
                  <input type="text" class="form-control input-for-contributing-cost"
                    id="input-contributing-cost-for-order-@(t.Id)"
                    placeholder="Contributing Cost" 
                    aria-describedby="inputGroupPrepend-2"
                    value="$555555555.55">
                </div>
              </td>
            </tr>
          }
        }
          </tbody>
        </table>
      </div>
      <div class="modal-footer">
        <img id="modalToAssociateOrder-okSpinny" src="/spinny-arrows.gif" style="display: none;" />
        <button type="button" class="btn btn-primary" onclick="modalToAssociateOrderOkButtonClick()">OK</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
      </div>
    </div>
  </div>
</div>

<script>

let isProgrammaticallyChangingStuff = false;

function modalToAssociateOrderCheckBoxClick(orderId)
{
  const checkbox = document.getElementById('btn-check-order-' + orderId);

  const row = document.getElementById('modalToAssociateOrder-inputsForOrder-' + orderId);
  row.style.display = checkbox.checked ? '' : 'none';

  let oldValue = isProgrammaticallyChangingStuff;
  isProgrammaticallyChangingStuff = true;
  try {
    const coinCountInput = document.getElementById('input-contributing-coin-count-for-order-' + orderId);
    coinCountInput.value = checkbox.getAttribute("data-orderCoinCountRemaining");

    const costInput = document.getElementById('input-contributing-cost-for-order-' + orderId);
    costInput.value = checkbox.getAttribute("data-orderCostRemaining");
  }
  finally {
    isProgrammaticallyChangingStuff = oldValue;
  }
}

function modalToAssociateOrderContributingCoinCountChanged(orderId)
{
  if (isProgrammaticallyChangingStuff) return;
  
  const checkbox = document.getElementById('btn-check-order-' + orderId);
  const orderTotalCost = checkbox.getAttribute("data-orderTotalCost");
  const orderCoinCount = checkbox.getAttribute("data-orderCoinCount");

  const coinCountInput = document.getElementById('input-contributing-coin-count-for-order-' + orderId);
  const costInput = document.getElementById('input-contributing-cost-for-order-' + orderId);
  try {
    costInput.value = (Number(coinCountInput.value) * Number(orderTotalCost) / Number(orderCoinCount)).toFixed();
  }
  catch {
    costInput.value = '<unknown>';
  }
}

function modalToAssociateOrderContributingCostChanged(orderId)
{
  if (isProgrammaticallyChangingStuff) return;
  
  const checkbox = document.getElementById('btn-check-order-' + orderId);
  const orderTotalCost = checkbox.getAttribute("data-orderTotalCost");
  const orderCoinCount = checkbox.getAttribute("data-orderCoinCount");

  const costInput = document.getElementById('input-contributing-cost-for-order-' + orderId);
  const coinCountInput = document.getElementById('input-contributing-coin-count-for-order-' + orderId);
  try {
    coinCountInput.value = (Number(orderCoinCount) * Number(costInput.value) / Number(orderTotalCost)).toString().substring(0, orderCoinCount.length);
  }
  catch {
    coinCountInput.value = '<unknown>';
  }
}

for (var input of document.getElementsByClassName('input-for-contributing-coin-count')) {
  let orderId = input.getAttribute('id').substring('input-contributing-coin-count-for-order-'.length, 5000);
  input.oninput = () => modalToAssociateOrderContributingCoinCountChanged(orderId);
}

for (var input of document.getElementsByClassName('input-for-contributing-cost')) {
  let orderId = input.getAttribute('id').substring('input-contributing-cost-for-order-'.length, 5000);
  input.oninput = () => modalToAssociateOrderContributingCostChanged(orderId);
}

async function modalToAssociateOrderOkButtonClick()
{
  let purchases = [];

  for (var checkbox of document.getElementsByClassName('button-for-selecting-purchase-orders')) {
    if (checkbox.checked) {
      try {
        let orderId = checkbox.getAttribute('data-orderId');
        let contributingCoinCount = Number(document.getElementById('input-contributing-coin-count-for-order-' + orderId).value);
        let contributingCost = Number(document.getElementById('input-contributing-cost-for-order-' + orderId).value);
        purchases.push({ orderId, contributingCoinCount, contributingCost });
      }
      catch (e) {
        alert('failed to generate request for given purcahse data. Are all inputs numeric? ' + e);
        return;
      }
    }
  }

  let spinny = document.getElementById('modalToAssociateOrder-okSpinny');
  spinny.style = '';
  try {
    let r = await fetch('/api/createTaxAssociation', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        saleOrderId: resolveOrderNeedingTaxAssociation_orderId,
        purchases
      })
    });

    if (r.ok) {
      location.reload();
    }
    else {
      let t = await r.text();
      alert('!ok: ' + t);
    }
  }
  catch (e) {
    alert(e);
  }
  finally {
    spinny.style = 'display: none;';
  }
}
</script>

<h1>
  Tax Associations
</h1>
<table class="table table-sm">
  <thead>
    <tr>
      <th scope="col">Name</th>
      <th scope="col">Date</th>
      <th scope="col"></th>
      <th scope="col">Count</th>
      <th scope="col">Per Coin</th>
      <th scope="col">Total</th>
      <th scope="col">Loss/Gain</th>
    </tr>
  </thead>
  <tbody>
@{
foreach (var yearOfAssociations in Model.TaxAssociations(null).GroupBy(x => x.Time.Year).OrderByDescending(x => x.Key))
{
  var yearNetGainLoss = yearOfAssociations.Sum(x => x.TotalCostBought + x.TotalCostSold);
  
  <tr style="font-weight: bold;">
    <td colspan="6">For the year @yearOfAssociations.Key: <span style="@(yearNetGainLoss > 0 ? "color:#008126;" : "color:#ff0000;") font-weight:bold; ">@yearNetGainLoss.ToString("c0")</span></td>
  </tr>
  
  foreach (var a in yearOfAssociations)
  {
    var isTrade = a.Sale.Order.PaymentCoinType != "USD" && a.Sale.Order.PaymentCoinType != "USDT";
    <tr>
      <td>@a.FriendlyName</td>
      <td>@a.Sale.Order.Time.ToLocalTime().ToString("g")</td>
      <td>@a.Sale.Order.TransactionType</td>
      <td>@a.Sale.Order.CoinCount.ToString("G29")</td>
      <td>$@(a.Sale.Order.PerCoinCostUsd?.ToString() ?? "<unknown>")@{ if (isTrade) { <text> USD<br>(@a.Sale.Order.PerCoinCost.ToString() @a.Sale.Order.PaymentCoinType)</text> } }</td>
      <td>@(a.Sale.Order.TaxableTotalCostUsd?.ToString("c0") ?? "$<unknown>")@{ if (isTrade) { <text> USD<br>(@a.Sale.Order.TotalCost.ToString() @a.Sale.Order.PaymentCoinType)</text> } }</td>
    </tr>

    bool first = true;
    foreach (var p in a.Purchases)
    {
      isTrade = p.Order.PaymentCoinType != "USD" && p.Order.PaymentCoinType != "USDT";
    <tr>
      <td>@{
        if (first)
        {
          <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#modalToDeleteAssociation"
            onclick="modalToDeleteAssociation_associationId = '@a.Id'"
          >
            Delete
          </button>
        }
        first = false;
      }</td>
      <td>@p.Order.Time.ToLocalTime().ToString("g")</td>
      <td>@p.Order.TransactionType</td>
      <td>@p.ContributingCoinCount.ToString("G29")</td>
      <td>$@(p.Order.PerCoinCostUsd?.ToString() ?? "<unknown>")@{ if (isTrade) { <text> USD<br>(@p.Order.PerCoinCost.ToString() @p.Order.PaymentCoinType)</text> } }</td>
      <td>@p.ContributingCost.ToString("c0")@{ if (isTrade) { <text> USD<br>(@(p.Order.TotalCostUsd == null ? "<unknown>" : (p.ContributingCost / (Decimal)p.Order.TotalCostUsd * p.Order.TotalCost).ToString()) @p.Order.PaymentCoinType)</text> } }</td>
      <td></td>
    </tr>
    }
    <tr>
      <td></td>
      <td colspan="4">
      @{
        var hasUnknownTaxableValue = a.Purchases.Any(p => p.Order.TaxableTotalCostUsd == null) || a.Sale.Order.TaxableTotalCostUsd == null;

        if (a.CoinCountBought != a.CoinCountSold || hasUnknownTaxableValue)
        {
          <img src="/red-x.svg" style="width:50px;height:50px;"/>
        }

        var coinCountNeeded = Math.Abs(Math.Abs(a.CoinCountBought) - Math.Abs(a.CoinCountSold));
        if (a.CoinCountBought > a.CoinCountSold)
        {
          <span>Has @coinCountNeeded.ToString("G29") too many coins purchased!</span>
        }
        else if (a.CoinCountBought < a.CoinCountSold)
        {
          <span>Has @coinCountNeeded.ToString("G29") more coins sold than purchased!</span>
        }
        
        if (hasUnknownTaxableValue)
        {
          <span>Has order with unknown taxable value!</span>
        }
      }
      </td>
      <td><span style="@(a.IsNetGain ? "color:#008126;" : "color:#ff0000;") font-weight:bold; ">@((a.TotalCostBought + a.TotalCostSold).ToString("c0"))</span></td>
      <td><span style="@(a.IsNetGain ? "color:#008126;" : "color:#ff0000;") font-weight:bold; ">@(((int)a.PercentNetGainLoss).ToString("D"))% @(a.IsNetGain ? "gain" : "loss")</span></td>
    </tr>
  }
}
}
  </tbody>
</table>

<!-- A modal dialog for deleting a tax association -->
<div class="modal fade" id="modalToDeleteAssociation" tabindex="-1" role="dialog" aria-labelledby="modalToDeleteAssociation-Title" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalToDeleteAssociation-Title">
          Delete tax association?
        </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
      </div>
      <div class="modal-footer">
        <img id="modalToDeleteAssociation-okSpinny" src="/spinny-arrows.gif" style="display: none;" />
        <button type="button" class="btn btn-primary" onclick="modalToDeleteAssociationOkButtonClick()">Delete</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
      </div>
    </div>
  </div>
</div>

<script>
let modalToDeleteAssociation_associationId = '';
async function modalToDeleteAssociationOkButtonClick() 
{
  let spinny = document.getElementById('modalToDeleteAssociation-okSpinny');
  spinny.style = '';
  try {
    let r = await fetch('/api/deleteTaxAssociation', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        taxAssociationId: modalToDeleteAssociation_associationId
      })
    });

    if (r.ok) {
      location.reload();
    }
    else {
      let t = await r.text();
      alert('!ok: ' + t);
    }
  }
  catch (e) {
    alert(e);
  }
  finally {
    spinny.style = 'display: none;';
  }
}
</script>
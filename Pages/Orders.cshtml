@page
@model OrdersModel
@{
  ViewData["Title"] = "Orders";
}

<style>
.table > thead > tr:first-child > th {
    border: none;
}
</style>

<h1>
  @ViewData["Title"]
</h1>

<script>
let filteredBy = '';
function filterBy(coinType)
{
  let body = document.getElementById('order-rows');
  for (var row of Array.from(body.children)) {
    let cell = row.children.namedItem('coin-types');
    let button_a = cell.children.namedItem('payment-coin-type-filter-button');
    let button_b = cell.children.namedItem('received-coin-type-filter-button');

    if (filteredBy !== coinType) // this is how the user turns on or changes filtering
    {
      row.style.display = (button_a.value === coinType || button_b.value === coinType)
        ? ''
        : 'none';

      button_a.className = (button_a.value === coinType)
        ? button_a.className.replace('btn-secondary', 'btn-primary')
        : button_a.className.replace('btn-primary', 'btn-secondary');

      button_b.className = (button_b.value === coinType)
        ? button_b.className.replace('btn-secondary', 'btn-primary')
        : button_b.className.replace('btn-primary', 'btn-secondary');
    }
    else // this is how the user turns off filtering
    {
      row.style.display = '';
      button_a.className = button_a.className.replace('btn-primary', 'btn-secondary');
      button_b.className = button_a.className.replace('btn-primary', 'btn-secondary');      
    }
  }
  
  body = document.getElementById('summary-coin-prices');
  for (var row of Array.from(body.children)) {
    if (filteredBy) {
      row.style.display = 'none';
    }
    else if (row.id === 'summary-coin-price-for-' + coinType) {
      row.style.display = '';
    }
    else {
      row.style.display = 'none';
    }
  }

  filteredBy = filteredBy ? '' : coinType;
}
</script>

<div id="summary-coin-prices">
  @foreach (var price in Model.CoinPrices) {
    <div style="display: none" id="summary-coin-price-for-@price.CoinType">@price.FriendlyName currently at $@price.PerCoinCostUsd.ToString()</div>
  }
</div>

<script>
// from the outstanding stackoverflow answer https://stackoverflow.com/a/901144
function getParameterByName(name, url = window.location.href) {
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

const sortBy = getParameterByName('sortBy') || 'date';
const nextSortByDate = sortBy === 'date' ? 'dateAscending' : 'date';
</script>

<table class="table table-sm">
  <thead>
    <tr>
      <th scope="col">
        <button id='date-sort-button' type="button" class="btn btn-secondary btn-sm"
          onClick="window.location = location.pathname + '?sortBy=' + nextSortByDate">
          Date
        </button>
      </th>
      <th scope="col">Coin Types</th>
      <th scope="col">Change</th>
      <th scope="col">Rate</th>
      <th scope="col">Explanation</th>
    </tr>
  </thead>
  <tbody id='order-rows'>
@{
  string sortBy = HttpContext.Request.Query.TryGetValue("sortBy", out var sortByValues) ? sortByValues[0] : null;
  foreach (var t in Model.Orders(sortBy))
  {
    <tr>
      <td>@t.Time.ToLocalTime().ToString("g")</td>
      <td id='coin-types' style="white-space: nowrap">
        <button id='received-coin-type-filter-button' type="button" class="btn btn-secondary btn-sm"
          onclick='filterBy("@t.ReceivedCoinType")'
          value='@t.ReceivedCoinType'
        >
          @t.ReceivedCoinType
        </button>
        <button id='payment-coin-type-filter-button' type="button" class="btn btn-secondary btn-sm"
          onclick='filterBy("@t.PaymentCoinType")'
          value='@t.PaymentCoinType'
        >
          @t.PaymentCoinType
        </button>
      </td>
      <td>@t.FormatCoinCountChange()</td>
      <td>@t.FormatExchangeRateUsd()</td>
      <td>@t.FormatExplanation()@{
        if (t.TransactionType == TransactionType.Adjustment)
        {
          <button type="button" class="btn btn-primary" onclick="deleteAdjustment('@t.Id', this.parentElement)">Delete Adjustment</button>
        }
      }</td>
    </tr>
  }
}
  </tbody>
</table>

@page
@model AltCoinAlertsModel
@{
  ViewData["Title"] = "AltCoin Alerts";
}

<style>
.table > thead > tr:first-child > th {
    border: none;
}
</style>

<div>
  <h1>
    AltCoin Alerts
  </h1>
  <table class="table table-sm">
    <thead>
      <tr>
        <th scope="col">Date</th>
        <th scope="col">Mention</th>
        <th scope="col">Coin Type</th>
        <th scope="col">Price on Day 0</th>
        <th scope="col">Price on Day 1</th>
        <th scope="col">Price on Day 2</th>
        <th scope="col">Price on Day 3</th>
        <th scope="col">Price on Day 4</th>
        <th scope="col">Price on Day 5</th>
        <th scope="col">Price on Day 6</th>
        <th scope="col">Price on Day 7</th>
      </tr>
    </thead>
    <tbody>
  @{
    void PrintPriceColumns(AltCoinAlert t, string coinType)
    {
      const string gainColor = "color:#008126;";
      const string lossColor = "color:#ff0000;";
      const string boldStyle = "font-weight:bold;";

      Decimal? firstPrice = null;
      foreach (var dayCount in Enumerable.Range(0, 8))
      {
        var price = Model.GetPrice(coinType, t.Date.AddDays(dayCount));
        int? percentUpDown;
        if (dayCount > 0)
        {
          if (firstPrice == null) percentUpDown = null;
          else if (price == null) percentUpDown = null;
          else try
          {
            percentUpDown = (int)(100m * (price.Value - firstPrice.Value) / firstPrice.Value);
          }
          catch
          {
            percentUpDown = -100;
          }
        }
        else
        {
          firstPrice = price;
          percentUpDown = null;
        }
        string word = (percentUpDown > 0 ? "up" : percentUpDown == 0 ? "same" : "down");
        string color = (percentUpDown > 0 ? gainColor : percentUpDown == 0 ? "" : lossColor);
      <td>$@(price?.ToString() ?? "<unknown>")@{ if (percentUpDown != null) { <span style="@color@boldStyle"> (@word @percentUpDown%)</span>}}</td>
      }
    }
  
    foreach (var t in Model.Alerts("date"))
    {
      bool needsDate = true;
      bool needsMention = true;
      foreach (var coinType in t.HypeCoins)
      {
      <tr style='background-color: #ffffcc'>
        <td>@(needsDate ? t.Date.ToLocalTime().ToShortDateString() : "")</td>
        <td>@(needsMention ? "Hype Coins" : "")</td>
        <td>@Model.GetFriendlyName(coinType)</td>
        @{PrintPriceColumns(t, coinType);}
      </tr>
      
        needsDate = false;
        needsMention = false;
      }
      
      needsMention = true;
      foreach (var coinType in t.WinnerCoins)
      {
      <tr style='background-color: #e1ffe1'>
        <td>@(needsDate ? t.Date.ToLocalTime().ToShortDateString() : "")</td>
        <td>@(needsMention ? "Winner Coins" : "")</td>
        <td>@Model.GetFriendlyName(coinType)</td>
        @{PrintPriceColumns(t, coinType);}
      </tr>
      
        needsDate = false;
        needsMention = false;
      }
      
      needsMention = true;
      foreach (var coinType in t.LoserCoins)
      {
      <tr style='background-color: #ffcc99'>
        <td>@(needsDate ? t.Date.ToLocalTime().ToShortDateString() : "")</td>
        <td>@(needsMention ? "Loser Coins" : "")</td>
        <td>@Model.GetFriendlyName(coinType)</td>
        @{PrintPriceColumns(t, coinType);}
      </tr>
      
        needsDate = false;
        needsMention = false;
      }
    }
  }
    </tbody>
  </table>
</div>

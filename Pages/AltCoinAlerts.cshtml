@page
@model AltCoinAlertsModel
@{
  ViewData["Title"] = "AltCoin Alerts";
}

<style>
.table > thead > tr:first-child > th {
    border: none;
}
</style>

<div>
  <h1>
    AltCoin Alerts
  </h1>
  <table class="table table-sm">
    <thead>
      <tr>
        <th scope="col">Date</th>
        <th scope="col">Mention</th>
        <th scope="col">Coin Type</th>
        <th scope="col">Price on Day 0</th>
        <th scope="col">Price on Day 1</th>
        <th scope="col">Price on Day 2</th>
        <th scope="col">Price on Day 3</th>
        <th scope="col">Price on Day 4</th>
        <th scope="col">Price on Day 5</th>
        <th scope="col">Price on Day 6</th>
        <th scope="col">Price on Day 7</th>
      </tr>
    </thead>
    <tbody>
  @{
    var now = DateTime.UtcNow;
    
    Decimal? ResolveNearFuturePrice(string coinType, DateTime date)
    {
      var price = Model.GetHistoricalPrice(coinType, date);
      
      // solve the kinda-silly problem where I enter AltCoinAlert data from 5:30pm
      // and really it gets timestamped at 11:30pm so it's in the "future"... 
      // I'll accept the current price in that scenario. --nathschu
      if (price == null && date > now && date < now.AddHours(8))
      {
        price = Model.GetCurrentPrice(coinType);
      }
      return price;
    }
    
    void PrintPriceColumns(AltCoinAlert t, string coinType, Action<int> submitMaxPercentGained)
    {
      const string gainColor = "color:#008126;";
      const string lossColor = "color:#ff0000;";
      const string boldStyle = "font-weight:bold;";
      
      int? maxPercentGained = null;

      Decimal? firstPrice = null;
      foreach (var dayCount in Enumerable.Range(0, 8))
      {
        var date = t.Date.AddDays(dayCount);
        var price = ResolveNearFuturePrice(coinType, date);

        int? percentUpDown;
        if (dayCount > 0)
        {
          if (firstPrice == null) percentUpDown = null;
          else if (price == null) percentUpDown = null;
          else try
          {
            percentUpDown = (int)(100m * (price.Value - firstPrice.Value) / firstPrice.Value);
          }
          catch
          {
            percentUpDown = null;
          }
          
          if (maxPercentGained == null) maxPercentGained = percentUpDown;
          else if (percentUpDown != null) maxPercentGained = Math.Max(maxPercentGained.Value, percentUpDown.Value);
        }
        else
        {
          firstPrice = price;
          percentUpDown = null;
        }
        string word = (percentUpDown > 0 ? "up" : percentUpDown == 0 ? "same" : "down");
        string color = (percentUpDown > 0 ? gainColor : percentUpDown == 0 ? "" : lossColor);
      <td>$@(price?.ToString() ?? "<unknown>")@{ if (percentUpDown != null) { <span style="@color@boldStyle"> (@word @(Math.Abs(percentUpDown.Value))%)</span>}}</td>
      }
      
      if (maxPercentGained != null) submitMaxPercentGained(maxPercentGained.Value);
    }

    var percentGainsTotal = new List<int>();
    var percentGainsHype = new List<int>();
    var percentGainsWinner = new List<int>();
    var percentGainsLoser = new List<int>();
    
    foreach (var t in Model.Alerts("date"))
    {
      bool needsDate = true;
      bool needsMention = true;
      foreach (var coinType in t.HypeCoins)
      {
        if (ResolveNearFuturePrice(coinType, t.Date) == null) continue;
      <tr style='background-color: #ffffcc'>
        <td>@(needsDate ? t.Date.ToLocalTime().ToShortDateString() : "")</td>
        <td>@(needsMention ? "Hype Coins" : "")</td>
        <td>@Model.GetFriendlyName(coinType)</td>
        @{PrintPriceColumns(t, coinType, p => { percentGainsHype.Add(p); percentGainsTotal.Add(p); });}
      </tr>
      
        needsDate = false;
        needsMention = false;
      }
      
      needsMention = true;
      foreach (var coinType in t.WinnerCoins)
      {
        if (ResolveNearFuturePrice(coinType, t.Date) == null) continue;
      <tr style='background-color: #e1ffe1'>
        <td>@(needsDate ? t.Date.ToLocalTime().ToShortDateString() : "")</td>
        <td>@(needsMention ? "Winner Coins" : "")</td>
        <td>@Model.GetFriendlyName(coinType)</td>
        @{PrintPriceColumns(t, coinType, p => { percentGainsWinner.Add(p); percentGainsTotal.Add(p); });}
      </tr>
      
        needsDate = false;
        needsMention = false;
      }
      
      needsMention = true;
      foreach (var coinType in t.LoserCoins)
      {
        if (ResolveNearFuturePrice(coinType, t.Date) == null) continue;
      <tr style='background-color: #ffcc99'>
        <td>@(needsDate ? t.Date.ToLocalTime().ToShortDateString() : "")</td>
        <td>@(needsMention ? "Loser Coins" : "")</td>
        <td>@Model.GetFriendlyName(coinType)</td>
        @{PrintPriceColumns(t, coinType, p => { percentGainsLoser.Add(p); percentGainsTotal.Add(p); });}
      </tr>
      
        needsDate = false;
        needsMention = false;
      }
    }
  }
    </tbody>
  </table>
</div>
<div>
  <h1>
    AltCoin Potential Profits
  </h1>
  <table class="table table-sm">
    <thead>
      <tr>
        <th scope="col">Mention</th>
        <th scope="col">Count</th>
        <th scope="col">Avg</th>
        <th scope="col">Std Dev</th>
        <th scope="col">Values</th>
      </tr>
    </thead>
    <tbody>
  @{
    double Average(List<int> sequence)
    {
      if (sequence.Count <= 0) return 0;
      return sequence.Select(x => (double)x).Average();
    }
    
    double StandardDeviation(List<int> sequence)
    {
      if (sequence.Count <= 1) return 0;
      var average = sequence.Select(x => (double)x).Average();
      var sum = sequence.Select(x => (double)x).Sum(d => Math.Pow(d - average, 2));
      return Math.Sqrt((sum) / (sequence.Count() - 1));
    }
    
    void WritePotentialProfitsRow(string mention, List<int> percentGains)
    {
      <tr>
        <td>@mention</td>
        <td>@percentGains.Count</td>
        <td>@(Average(percentGains).ToString("N1"))%</td>
        <td>@(StandardDeviation(percentGains).ToString("N1"))%</td>
        <td>@{
          var bucket = new List<int>();
          foreach (var p in percentGains.OrderBy(x => x))
          {
            if (bucket.Count < 10) bucket.Add(p);
            else { <text>@string.Join(", ", bucket)<br></text> bucket.Clear(); }
          }
          if (bucket.Count > 0)
          {
            <text>@string.Join(", ", bucket)<br></text>
          }
        }</td>
      </tr>
    }
    
    WritePotentialProfitsRow("Total", percentGainsTotal);
    WritePotentialProfitsRow("Hype", percentGainsHype);
    WritePotentialProfitsRow("Winner", percentGainsWinner);
    WritePotentialProfitsRow("Loser", percentGainsLoser);
  }
    </tbody>
  </table>
</div>

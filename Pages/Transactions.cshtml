@page
@model TransactionsModel
@{
  ViewData["Title"] = "Transactions";
}

<style>
.table > thead > tr:first-child > th {
    border: none;
}
</style>

<h1>
  @ViewData["Title"]
  <button type="button" class="btn btn-secondary" style="margin-left:20px;" 
    onclick="
    {
      let input = document.getElementById('upload-coinbase-fills-input');
      input.onchange = async e => {
        let formData = new FormData();
        try {
          var file = e.target.files[0];
          if (!file) return;
          formData.append('file', file);
        }
        finally {
          // make sure that re-attempts always trigger 'onchange' again
          input.value = '';
        }
        let spinny = document.getElementById('upload-coinbase-fills-spinny');
        spinny.style = '';
        try {
          let r = await fetch('/api/uploadCsv', {method: 'POST', body: formData});
          if (r.ok) {
            location.reload();
          }
          else {
            let t = await r.text();
            alert(t);
          }
        }
        catch (e) {
          alert(e);
        }
        finally {
          spinny.style = 'display: none;';
        }
      };
      input.click();
    }"
  >
    Upload fills/orders CSV
  </button>
  <input id="upload-coinbase-fills-input" type="file" name="name" style="display: none;" />
  <img id="upload-coinbase-fills-spinny" src="/spinny-arrows.gif" style="display: none;" />
  <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#modalToAddAdjustment" onclick="onAddAdjustment()">
    Add Adjustment
  </button>
</h1>

<!-- A modal dialog for adding an adjustment transaction -->
<div class="modal fade" id="modalToAddAdjustment" tabindex="-1" role="dialog" aria-labelledby="modalToAddAdjustment-Title" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalToAddAdjustment-Title">
          Add Adjustment Transaction
        </h5>
        (like... you need to adjust how much of a particular coin you actually own because this software doesn't account for wallet transfer fees)
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="input-group mb-3">
        
          <div class="input-group-prepend">
            <label class="input-group-text" for="modalToAddAdjustment_CoinType">Coin Type</label>
          </div>
          <select class="custom-select" id="modalToAddAdjustment_CoinType">
        @{
          foreach (var coinType in Model.GetCoinTypes())
          {
            <option value="@coinType.MachineName">@coinType.FriendlyName</option>
          }
        }
          </select>
        </div>
        <div class="input-group mb-3">
          <div class="input-group-prepend">
            <span class="input-group-text">Coin Count</span>
          </div>
          <input type="text" class="form-control" aria-label="Amount" value="-0.0001" id="modalToAddAdjustment_CoinCount">
        </div>
      </div>
      <div class="modal-footer">
        <img id="modalToAddAdjustment-okSpinny" src="/spinny-arrows.gif" style="display: none;" />
        <button type="button" class="btn btn-primary" onclick="modalToAddAdjustmentOkButtonClick()">OK</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
      </div>
    </div>
  </div>
</div>

<script>
async function modalToAddAdjustmentOkButtonClick()
{
  let coinTypeInput = document.getElementById('modalToAddAdjustment_CoinType');
  let coinCountInput = document.getElementById('modalToAddAdjustment_CoinCount');

  let spinny = document.getElementById('modalToAddAdjustment-okSpinny');
  spinny.style = '';
  try {
    let r = await fetch('/api/addAdjustment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        coinType: coinTypeInput.value,
        coinCount: coinCountInput.value
      })
    });

    if (r.ok) {
      location.reload();
    }
    else {
      let t = await r.text();
      alert('!ok: ' + t);
    }
  }
  catch (e) {
    alert(e);
  }
  finally {
    spinny.style = 'display: none;';
  }
}

async function deleteAdjustment(tradeId, spinnyParent)
{
  let spinny = document.getElementById('deleteAdjustment-spinny');
  spinnyParent.appendChild(spinny);
  spinny.style = '';
  try {
    let r = await fetch('/api/deleteAdjustment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ tradeId })
    });

    if (r.ok) {
      location.reload();
    }
    else {
      let t = await r.text();
      alert('!ok: ' + t);
    }
  }
  catch (e) {
    alert(e);
  }
  finally {
    spinny.style = 'display: none;';
  }
}

let filteredBy = '';
function filterBy(coinType)
{
  let body = document.getElementById('transaction-rows');
  for (var row of Array.from(body.children)) {
    let cell = row.children.namedItem('coin-types');
    let button_a = cell.children.namedItem('payment-coin-type-filter-button');
    let button_b = cell.children.namedItem('received-coin-type-filter-button');

    if (filteredBy !== coinType) // this is how the user turns on or changes filtering
    {
      row.style.display = (button_a.value === coinType || button_b.value === coinType)
        ? ''
        : 'none';

      button_a.className = (button_a.value === coinType)
        ? button_a.className.replace('btn-secondary', 'btn-primary')
        : button_a.className.replace('btn-primary', 'btn-secondary');

      button_b.className = (button_b.value === coinType)
        ? button_b.className.replace('btn-secondary', 'btn-primary')
        : button_b.className.replace('btn-primary', 'btn-secondary');
    }
    else // this is how the user turns off filtering
    {
      row.style.display = '';
      button_a.className = button_a.className.replace('btn-primary', 'btn-secondary');
      button_b.className = button_a.className.replace('btn-primary', 'btn-secondary');      
    }
  }
  filteredBy = filteredBy ? '' : coinType;
}
</script>

<table class="table table-sm ">
  <thead>
    <tr>
      <th scope="col">Date</th>
      <th scope="col">Type</th>
      <th scope="col">Coin Types</th>
      <th scope="col">Change</th>
      <th scope="col">Rate</th>
      <th scope="col">Explanation</th>
    </tr>
  </thead>
  <tbody id='transaction-rows'>
@foreach (var t in Model.OrderedTransactions) 
{
  var isTrade = t.PaymentCoinType != "USD";

    <tr>
      <td>@t.Time.ToLocalTime().ToString("g")</td>
      <td>@{ 
        if (t.TransactionType != TransactionType.Adjustment) { <text>@t.TransactionType</text> }
        else { <button type="button" class="btn btn-primary" onclick="deleteAdjustment('@t.Id', this.parentElement)">Delete Adjustment</button> }
      }</td>
      <td id='coin-types' style="white-space: nowrap">
        <button id='received-coin-type-filter-button' type="button" class="btn btn-secondary btn-sm"
          onclick='filterBy("@t.ReceivedCoinType")'
          value='@t.ReceivedCoinType'
        >
          @t.ReceivedCoinType
        </button>
        <button id='payment-coin-type-filter-button' type="button" class="btn btn-secondary btn-sm"
          onclick='filterBy("@t.PaymentCoinType")'
          value='@t.PaymentCoinType'
        >
          @t.PaymentCoinType
        </button>
      </td>
      <td>@t.FormatCoinCountChange()</td>
      <td>@t.FormatExchangeRateUsd()</td>
      <td>@t.FormatExplanation()</td>
    </tr>
}
  </tbody>
</table>
<img id="deleteAdjustment-spinny" src="/spinny-arrows.gif" style="display: none;" />
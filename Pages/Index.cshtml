@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<style>
.table > thead > tr:first-child > th {
    border: none;
}

.table {
  margin-bottom: 0px;
}
</style>

<div class="text-center">
@{
  int nullCount = 0;
  Decimal total = 0m;
  foreach (var coinSummary in Model.Summaries())
  {
    if (coinSummary.CashValue == null) nullCount++;
    else total += coinSummary.CashValue.Value;
  }
  string totalValue = total.ToString("c") + (nullCount == 0 ? "" : $" ({nullCount} coin types pending...)");
  <h1 class="display-4">@totalValue</h1>
}
</div>

<script>
// from the outstanding stackoverflow answer https://stackoverflow.com/a/901144
function getParameterByName(name, url = window.location.href) {
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

const sortBy = getParameterByName('sortBy') || 'cashValue';
const nextSortByCoinType = sortBy === 'coinType' ? 'coinTypeDescending' : 'coinType';
const nextSortByCashValue = sortBy === 'cashValue' ? 'cashValueAscending' : 'cashValue';
</script>

<table class="table table-sm ">
  <thead>
    <tr>
      <th scope="col">
        <button type="button" class="btn btn-secondary btn-sm"
          onClick="window.location = location.pathname + '?sortBy=' + nextSortByCoinType">
          Name
        </button>
      </th>
      <th scope="col">Count</th>
      <th scope="col">Price per coin</th>
      <th scope="col">
        <button type="button" class="btn btn-secondary btn-sm"
          onClick="window.location = location.pathname + '?sortBy=' + nextSortByCashValue">
          Cash Value
        </button>
      </th>
    </tr>
  </thead>
  <tbody>
@{
  string FormatPricePerCoinUsd(Decimal? rate)
  {
    return rate == null ? null : 
      rate < 0.10m ? $"${rate.Value}" :
      rate.Value.ToString("c");
  }

  var ordersByCoinType = Model.OrdersByCoinType("date");

  string sortBy = HttpContext.Request.Query.TryGetValue("sortBy", out var sortByValues) ? sortByValues[0] : null;
  foreach (var s in Model.Summaries(sortBy))
  {
    <tr>
      <td>
        <a data-toggle="collapse" href="#collapse-@s.CoinType" role="button" aria-expanded="false" aria-controls="collapse-@s.CoinType">
          @s.FriendlyName
        </a>
      </td>
      <td>@s.CoinCount.ToString("G29")</td>
      <td>@FormatPricePerCoinUsd(s.CoinPrice?.PerCoinCostUsd)</td>
      <td>@s.CashValue?.ToString("c")</td>
    </tr>
    <tr class="collapse" id="collapse-@s.CoinType">
      <td colspan="4">
        <div class="card card-body">
          <table class="table table-sm">
            <thead>
              <tr>
                <th scope="col">Date</th>
                <th scope="col">Change</th>
                <th scope="col">Rate</th>
                <th scope="col">Description</th>
              </tr>
            </thead>
            <tbody>
@{
    string FormatCoinCount(Decimal coinCount, string coinType)
    {
      if (coinType == "USD" || coinType == "USDT" || coinType == "USDC")
      {
        return $"{coinCount.ToString("c")} {coinType}";
      }
      return $"{coinCount.ToString("G29")} {coinType}";
    }

    void PrintDescription(Order o)
    {
      if (o.TransactionType == TransactionType.Trade)
      {
        if (o.ReceivedCoinType == s.CoinType)
        {
          <text>Bought for @FormatCoinCount(o.PaymentCoinCount, o.PaymentCoinType)</text>
        }
        else
        {
          <text>Sold for @FormatCoinCount(o.ReceivedCoinCount, o.ReceivedCoinType)</text>
        }
      }
      else if (o.TransactionType == TransactionType.Adjustment)
      {
        <text>Adjustment</text>
      }
    }

    string FormatChange(Order o)
    {
      if (o.PaymentCoinType == s.CoinType)
      {
        return $"-{FormatCoinCount(o.PaymentCoinCount, s.CoinType)}";
      }
      else // o.ReceivedCoinType == s.CoinType
      {
        return FormatCoinCount(o.ReceivedCoinCount, s.CoinType);
      }
    }

    string FormatExchangeRate(Order o)
    {
      if (o.PaymentCoinType == s.CoinType)
      {
        return FormatPricePerCoinUsd(o.PaymentPerCoinCostUsd);
      }
      else // o.ReceivedCoinType == s.CoinType
      {
        return FormatPricePerCoinUsd(o.ReceivedPerCoinCostUsd);
      }
    }

    var orders = ordersByCoinType[s.CoinType];
    foreach (var o in orders)
    {
              <tr>
                <td>@o.Time.ToLocalTime().ToString("g")</td>
                <td>@FormatChange(o)</td>
                <td>@FormatExchangeRate(o) per @s.CoinType</td>
                <td>@{PrintDescription(o);}</td>
              </tr>
    }
}
            </tbody>
          </table>
        </div>
      </td>
    </tr>
  }
}
  </tbody>
</table>